{"version":3,"sources":["src/index.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,yDAAyD;AAKhD,8CAAiB;AAH1B,iDAA8C;AAGH,uBAHlC,2BAAY,CAGkC;AAFvD,6CAA4E;AAM5E;;;;;;;GAOG;AACH,iBAAiB,IAAY,EAAE,OAAuB,EAAE,OAAmB,KAAK;IAC9E,MAAM,UAAU,GAAqF;QACnG,GAAG,EAAE,yBAAY;QACjB,UAAU,EAAE,gCAAmB;KAChC,CAAC;IACF,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACtD,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;AAC5B,CAAC;AAED;;;;;;;;GAQG;AACH,gBAAuB,IAAY,EAAE,OAAuB,EAAE,OAAmB,KAAK;IACpF,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;AACtC,CAAC;AAFD,wBAEC;AAED;;;;;;;GAOG;AACH,mBAA0B,IAAY,EAAE,OAAuB;IAC7D,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;AACvC,CAAC;AAFD,8BAEC;AAED;;;;;;;GAOG;AACH,0BAAiC,IAAY,EAAE,OAAuB;IACpE,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;AAC9C,CAAC;AAFD,4CAEC","file":"index.js","sourcesContent":["'use strict';\n\nimport * as CompletionTrigger from './CompletionTrigger';\nimport { CreateOptions } from './CreateOptions';\nimport { CreateResult } from './CreateResult';\nimport { Generator, PDFGenerator, ScreenshotGenerator } from './Generators';\n\nexport { CompletionTrigger, CreateOptions, CreateResult };\n\nexport type OutputType = 'pdf' | 'screenshot';\n\n/**\n * Internal function used by all exported creator functions.\n *\n * @param {string} html The HTML string.\n * @param {Options} [options] The generation options.\n * @param {('pdf'|'screenshot')} [type=pdf] The type of document to generate.\n * @returns {Promise<CreateResult>} the generated data.\n */\nfunction _create(html: string, options?: CreateOptions, what: OutputType = 'pdf'): Promise<CreateResult> {\n  const generators: {[x in OutputType]: { new (html: string, options?: CreateOptions): Generator } } = {\n    pdf: PDFGenerator,\n    screenshot: ScreenshotGenerator,\n  };\n  const generator = new generators[what](html, options);\n  return generator.create();\n}\n\n/**\n * Generates a PDF or screenshot from the given HTML string, launching Chrome as necessary.\n *\n * @export\n * @param {string} html The HTML string.\n * @param {Options} [options] The generation options.\n * @param {('pdf'|'screenshot')} [type=pdf] The type of document to generate.\n * @returns {Promise<CreateResult>} The generated data.\n */\nexport function create(html: string, options?: CreateOptions, type: OutputType = 'pdf'): Promise<CreateResult> {\n  return _create(html, options, type);\n}\n\n/**\n * Generates a PDF from the given HTML string, launching Chrome as necessary.\n *\n * @export\n * @param {string} html the HTML string.\n * @param {Options} [options] the generation options.\n * @returns {Promise<CreateResult>} the generated PDF data.\n */\nexport function createPDF(html: string, options?: CreateOptions): Promise<CreateResult> {\n  return _create(html, options, 'pdf');\n}\n\n/**\n * Generates a screenshot from the given HTML string, launching Chrome as necessary.\n *\n * @export\n * @param {string} html the HTML string.\n * @param {Options} [options] the generation options.\n * @returns {Promise<CreateResult>} the generated screenshot data.\n */\nexport function createScreenshot(html: string, options?: CreateOptions): Promise<CreateResult> {\n  return _create(html, options, 'screenshot');\n}\n"],"sourceRoot":"../.."}